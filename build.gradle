buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'com.bmuschko:gradle-docker-plugin:2.6.5'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.bmuschko.docker-java-application'

jar {
	baseName = 'docker-test'
	version = '0.0.1-SNAPSHOT'
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
	baseName = 'docker-test'
	version =  '0.1.0'
}

docker {
	url = dockerHostUrl()
	certPath = dockerCertPath()
}

URI dockerHostEnv() {
	String uri = System.getenv('DOCKER_HOST')
	uri ? new URI(uri) : null
}

File dockerCertPath() {
	String certPathEnv = System.getenv('DOCKER_CERT_PATH')
	certPathEnv ? file(certPathEnv) : null;
}

String dockerHostUrl() {
	if (dockerHostEnv()) {
		URI uri = dockerHostEnv()
		if (uri.scheme == 'unix') {
			uri
		} else if (uri.scheme == 'tcp') {
			(new URI(uri.scheme != 'tcp' ?: 'https' , uri.userInfo, uri.host, uri.port, uri.path, uri.query, uri.fragment)).toString()
		}
	} else {
		org.gradle.internal.os.OperatingSystem.current().isLinux() ? 'unix:///var/run/docker.sock' : 'http://localhost:2375'
	}
}

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	testCompile('org.springframework.boot:spring-boot-starter-test') 
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}

task buildAppImage(type: DockerBuildImage) {
	dependsOn build
	inputDir = file('.')
	tag = 'test/docker-test'
}

task buildCouchImage(type: DockerBuildImage) {
	dependsOn buildAppImage
	inputDir = file('couchdb/')
}

task createCouchContainer(type: DockerCreateContainer) {
	dependsOn buildCouchImage
	targetImageId { buildCouchImage.getImageId() }
	portBindings = ['8080:8080']
}
